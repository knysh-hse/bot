import logging
import sqlite3
import uuid
from datetime import datetime, timedelta, timezone
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from yookassa import Payment, Configuration
import asyncio
from dotenv import load_dotenv
import os
import sys
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cp1251 –¥–ª—è Windows
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s:%(name)s:%(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='cp1251')

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
YOOMONEY_ACCOUNT_ID = os.getenv("YOOMONEY_ACCOUNT_ID")
YOOMONEY_SECRET_KEY = os.getenv("YOOMONEY_SECRET_KEY")

Configuration.account_id = YOOMONEY_ACCOUNT_ID
Configuration.secret_key = YOOMONEY_SECRET_KEY

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id INTEGER PRIMARY KEY,
    payment_method_id TEXT,
    email TEXT
)''')
conn.commit()

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = set()

class PaymentStates(StatesGroup):
    waiting_for_email = State()

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

async def set_bot_commands():
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="buy", description="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
    ])

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    active_users.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    intro_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –û–ª—å–≥–∞ –ê–±–∞–∫—É–º–æ–≤–∞, –≤—Ä–∞—á-—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, —Ç—Ä–µ–Ω–µ—Ä —Å 25-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∏ –ø—Ä–æ—Å—Ç–æ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∂–∏–≤—ë—Ç —Å–≤–æ—é –ª—É—á—à—É—é –∂–∏–∑–Ω—å! "
        "–ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ö–æ—á–µ—à—å –ø–æ—Ö—É–¥–µ—Ç—å –∏ —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–π. –ò –º–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —ç—Ç–æ–º ‚ù§Ô∏è"
    )
    await bot.send_message(chat_id=user_id, text=intro_text)
    marathon_text = (
        "–¢—ã—Å—è—á–∏ –∂–µ–Ω—â–∏–Ω –º–µ—á—Ç–∞—é—Ç –ø–æ—Ö—É–¥–µ—Ç—å, –≤–µ—Ä–Ω—É—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–æ‚Ä¶\n"
        "‚ùå –î–∏–µ—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n"
        "‚ùå –°–ø–æ—Ä—Ç–∑–∞–ª –∫–∞–∂–µ—Ç—Å—è –∞–¥–æ–º.\n"
        "‚ùå –í–µ—Å —É—Ö–æ–¥–∏—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (–∏–ª–∏ –Ω–µ —É—Ö–æ–¥–∏—Ç –≤–æ–æ–±—â–µ).\n"
        "‚ùå –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Ö–æ–∂ –Ω–∞ –¥–µ–Ω—å —Å—É—Ä–∫–∞.\n"
        "‚ùå –ò —Å–∏–ª –∏–∑–º–µ–Ω–∏—Ç—å –∂–∏–∑–Ω—å —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º –≤—Å—ë –º–µ–Ω—å—à–µ...\n\n"
        "–ß—Ç–æ –µ—Å–ª–∏ —è —Å–∫–∞–∂—É, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ ‚Äì –Ω–µ –≤ –≤–∞—Å? –ê –≤ —Ç–æ–º, —á—Ç–æ –≤–∞–º –Ω–∞–≤—è–∑–∞–ª–∏ –ø–æ–¥—Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. "
        "–ó–∞ –¥–µ—Å—è—Ç–∫–∏ –ª–µ—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—É–º–º–∞—Ä–Ω–æ –ø–æ—Ö—É–¥–µ–ª–∏ –Ω–∞ —Ç–æ–Ω–Ω—ã –∏ –≤–µ—Ä–Ω—É–ª–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å —ç–Ω–µ—Ä–≥–∏—é –∏ —Å—á–∞—Å—Ç—å–µ, —è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–≤–æ—é –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é. "
        "–ò–º–µ–Ω–Ω–æ –µ–π —è –ø–æ–¥–µ–ª—é—Å—å –Ω–∞ –º–æ–µ–º –Ω–æ–≤–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ.\n\n"
        "üî• –°–ë–†–û–°: 50 —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å—á–∞—Å—Ç—å—é üî•\n\n"
        "–ú–∞—Ä–∞—Ñ–æ–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç —É–∂–µ 2 –º–∞—Ä—Ç–∞ ‚Äî –∏ –¥–∞ –Ω–∞—á–Ω—É—Ç—Å—è 2 –Ω–µ–¥–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –º—ã—à–ª–µ–Ω–∏–µ–º, –æ–±—Ä–∞–∑–æ–º –∂–∏–∑–Ω–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏! "
        "–Ø —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞ 50 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ 20 –∑–∞–¥–∞–Ω–∏–π ‚Äî –≤—Å—ë –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥–ª–∞ –Ω–∞–∫–æ–Ω–µ—Ü –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å—Ç—Ä–æ–π–Ω–æ–π, –∂–µ–ª–∞–Ω–Ω–æ–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–π!\n\n"
        "–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç?\n"
        "‚úÖ 14 –¥–Ω–µ–π —á—ë—Ç–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π ‚Äì –±–µ–∑ –¥–æ–≥–∞–¥–æ–∫, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.\n"
        "‚úÖ –≠—Ñ–∏—Ä—ã, –ª–µ–∫—Ü–∏–∏ –∏ –ø–æ–¥–∫–∞—Å—Ç—ã ‚Äì –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ —Å–ª–æ–∂–Ω–æ–º.\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äì –≤—ã –Ω–µ –æ–¥–Ω–∞, –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º —ç—Ç–æ—Ç –ø—É—Ç—å –≤–º–µ—Å—Ç–µ.\n\n"
        "–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫—Ä–æ–µ—Ç –º–∞—Ä–∞—Ñ–æ–Ω?\n"
        "‚Äî –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –ø–∏—Ç–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ö—É–¥–µ—Ç—å –∏ –±—ã—Ç—å —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–π\n"
        "‚Äî –ì–æ—Ä–º–æ–Ω—ã –∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º ‚Äì –ø–æ—á–µ–º—É –≤–∞—à–µ —Ç–µ–ª–æ ¬´–Ω–µ —Ö–æ—á–µ—Ç¬ª —Ö—É–¥–µ—Ç—å\n"
        "‚Äî –ü–∏—Ç–∞–Ω–∏–µ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äì –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç—å –±–µ–∑ –≥–æ–ª–æ–¥–æ–≤–æ–∫ –∏ –∂–µ—Å—Ç–∏?\n"
        "‚Äî –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ –∏ —Å—Ç—Ä–µ—Å—Å ‚Äì –∫–∞–∫ —É–±—Ä–∞—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã?\n"
        "‚Äî –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã ‚Äì —á—Ç–æ –Ω—É–∂–Ω–æ –≤–∞—à–µ–º—É —Ç–µ–ª—É?\n"
        "‚Äî –ì–µ–Ω–µ—Ç–∏–∫–∞ –∏ –ø—Å–∏—Ö–∏–∫–∞ ‚Äî –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏?\n"
        "‚Äî –ü–ª–∞–Ω –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî –∫–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?\n\n"
        "–î–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –º–∞—Ä–∞—Ñ–æ–Ω?\n"
        "‚úî –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å –∏ –±–æ–ª—å—à–µ –µ–≥–æ –Ω–µ –Ω–∞–±–∏—Ä–∞—Ç—å.\n"
        "‚úî –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –ø–æ—Ç–µ—Ä—é —ç–Ω–µ—Ä–≥–∏–∏.\n"
        "‚úî –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å —Å–≤–æ—ë —Ç–µ–ª–æ –∏ –¥–∞—Ç—å –µ–º—É —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ.\n\n"
        "–°—Ç–∞—Ä—Ç—É–µ–º —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ! –¢—ã —Å –Ω–∞–º–∏?"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="–ö–£–ü–ò–¢–¨", callback_data="buy_subscription")
    await bot.send_message(chat_id=user_id, text=marathon_text, reply_markup=builder.as_markup())
    cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        asyncio.create_task(send_reminder_after_2_hours(user_id))

@dp.callback_query(F.data == "buy_subscription")
async def process_buy_callback(callback: types.CallbackQuery, state: FSMContext):
    await handle_buy_command(callback.message, state)
    await callback.answer()

@dp.message(Command("buy"))
async def handle_buy_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
    if cursor.fetchone():
        await message.reply("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return
    await message.reply("üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:")
    await state.set_state(PaymentStates.waiting_for_email)

@dp.message(PaymentStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    user_id = message.from_user.id
    if "@" not in email or "." not in email:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    try:
        expires_at = (datetime.now(timezone.utc) + timedelta(minutes=5)).strftime('%Y-%m-%dT%H:%M:%SZ')
        payment = Payment.create({
            "amount": {"value": "2999.00", "currency": "RUB"},  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 2999 —Ä—É–±–ª–µ–π
            "confirmation": {"type": "redirect", "return_url": "https://t.me/your_bot"},
            "capture": True,
            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
            "expires_at": expires_at,
            "receipt": {
                "customer": {"email": email},
                "items": [{"description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", "quantity": "1.00", "amount": {"value": "2999.00", "currency": "RUB"}, "vat_code": 1, "payment_subject": "service", "payment_mode": "full_payment"}]  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 2999 —Ä—É–±–ª–µ–π
            }
        }, str(uuid.uuid4()))
        builder = InlineKeyboardBuilder()
        builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 2999 —Ä—É–±–ª–µ–π", url=payment.confirmation.confirmation_url)  # –û–±–Ω–æ–≤–ª—ë–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        await message.reply("‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç):", reply_markup=builder.as_markup())
        await state.update_data(payment_id=payment.id, email=email)
        asyncio.create_task(check_payment_status(user_id, payment.id, email))
        await state.set_state(None)
    except Exception as e:
        logging.error(f"Payment error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

async def check_payment_status(user_id: int, payment_id: str, email: str):
    for _ in range(30):
        await asyncio.sleep(10)
        payment = Payment.find_one(payment_id)
        if payment.status == 'succeeded':
            try:
                cursor.execute('INSERT OR REPLACE INTO subscriptions (user_id, email) VALUES (?, ?)', (user_id, email))
                conn.commit()
                invite_link = await bot.create_chat_invite_link(chat_id=CHANNEL_ID, member_limit=1)
                await bot.send_message(chat_id=user_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\nüìß –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É: {email}\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {invite_link.invite_link}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.", disable_web_page_preview=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
                await bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        elif payment.status == 'canceled':
            await bot.send_message(user_id, "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.")
            return
    await bot.send_message(user_id, "‚åõÔ∏è –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.")

async def send_reminder_after_2_hours(user_id: int):
    await asyncio.sleep(2 * 60)  # 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        reminder_text = (
            "–°–ë–†–û–°: –≤–µ—Å–∞, —É–±–µ–∂–¥–µ–Ω–∏–π –∏ —Å—Ç—Ä–∞—Ö–æ–≤. –û—Ç–∫–∞–∂–∏—Å—å –æ—Ç –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –¥–∞–≤–Ω–æ –Ω–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –∑–∞–∫–æ–Ω—á–∏ –¥–µ–Ω—å —Å—É—Ä–∫–∞ ‚Äî —Å—Ç–∞–Ω—å, –Ω–∞–∫–æ–Ω–µ—Ü, —Å—Ç—Ä–æ–π–Ω–æ–π, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–π –∏ —Å—á–∞—Å—Ç–ª–∏–≤–æ–π! "
            "–¢—ã –≤—Å–µ–≥–æ –≤ —à–∞–≥–µ –æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ç–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—à—å –≤ –≥–æ–ª–æ–≤–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ö–≤–∞—Ç–∏—Ç –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –ø–æ—Ç–æ–º? –¢—ã —É —Å–µ–±—è –æ–¥–Ω–∞, –¥—Ä—É–≥–∏–µ –ø–æ–¥–æ–∂–¥—É—Ç, –∞ —Ç—ã ‚Äî –Ω–µ—Ç!\n\n"
            "–ó–∞—Ö–æ–¥–∏ –Ω–∞ –º–æ–π –º–∞—Ä–∞—Ñ–æ–Ω\nüî• –°–ë–†–û–°: 50 —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å—á–∞—Å—Ç—å—é üî•"
        )
        await bot.send_message(chat_id=user_id, text=reminder_text)

async def send_spring_message():
    text = (
        "–í–µ—Å–Ω–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –Ω–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Ö–∞–Ω–¥—Ä–∞ –≤ –¥—É—à–µ? –ê —á—Ç–æ –µ—Å–ª–∏ —è —Å–∫–∞–∂—É, —á—Ç–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞, –≤ –ª—é–±–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –∏ –ø—Ä–∏ –ª—é–±—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –º–æ–∂–Ω–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–π. "
        "–î–∞, —è –∑–Ω–∞—é, –æ —á–µ–º –≥–æ–≤–æ—Ä—é: –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ç–µ–±—è –ø—Ä–µ–¥–∞—é—Ç –∏ –∂–∏–∑–Ω—å –ø–æ —â–µ–ª—á–∫—É –ø–∞–ª—å—Ü–µ–≤ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–µ–±—è –ú–û–ñ–ù–û –ò –ù–£–ñ–ù–û. –ù–∞—á–Ω–∏, –Ω–∞–∫–æ–Ω–µ—Ü, –∂–∏—Ç—å –¥–ª—è —Å–µ–±—è. –ü–æ—Ö—É–¥–µ–π, –ø—Ä–∏–≤–µ–¥–∏ –≤ –ø–æ—Ä—è–¥–æ–∫ –º—ã—Å–ª–∏, –¥—ã—à–∏ –ø–æ–ª–Ω–æ–π –≥—Ä—É–¥—å—é! "
        "–í—Å–µ–º—É —ç—Ç–æ–º—É —É–∂–µ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –±—É–¥–µ–º —É—á–∏—Ç—å—Å—è –Ω–∞ –º–æ—ë–º –Ω–æ–≤–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ\n\nüî• –°–ë–†–û–°: 50 —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å—á–∞—Å—Ç—å—é üî•"
    )
    for user_id in active_users:
        cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
        if not cursor.fetchone():
            await bot.send_message(chat_id=user_id, text=text)

async def send_last_chance_message():
    text = (
        "–ë–û–õ–¨–®–ï –®–ê–ù–°–ê –ù–ï –ë–£–î–ï–¢! –ó–∞–±–æ—Ç–ª–∏–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Å–µ–π—á–∞—Å ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É.\n\nüî• –°–ë–†–û–°: 50 —à–∞–≥–æ–≤ –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å—á–∞—Å—Ç—å—é üî•"
    )
    for user_id in active_users:
        cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
        if not cursor.fetchone():
            await bot.send_message(chat_id=user_id, text=text)

async def send_we_started_message():
    text = "–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏, –Ω–æ –∂–¥—ë–º –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è!"
    for user_id in active_users:
        cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (user_id,))
        if not cursor.fetchone():
            await bot.send_message(chat_id=user_id, text=text)

scheduler.add_job(
    send_spring_message,
    CronTrigger.from_crontab("0 12 1 3 *", timezone="Europe/Moscow")  # 1 –º–∞—Ä—Ç–∞ 2025, 12:00 MSK
)
scheduler.add_job(
    send_last_chance_message,
    CronTrigger.from_crontab("0 12 2 3 *", timezone="Europe/Moscow")  # 2 –º–∞—Ä—Ç–∞ 2025, 12:00 MSK
)
scheduler.add_job(
    send_we_started_message,
    CronTrigger.from_crontab("0 12 3 3 *", timezone="Europe/Moscow")  # 3 –º–∞—Ä—Ç–∞ 2025, 12:00 MSK
)

async def main():
    await set_bot_commands()
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    await asyncio.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ª–ª–∏–Ω–≥–æ–º
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())